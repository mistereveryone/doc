# Variables
$ProgramPath = "C:\Users\ESTABLISHED.exe"  # Remplacer par ton ex√©cutable
$TaskName    = "TempExec_{$( [Guid]::NewGuid().ToString().Substring(0,8) )}"  # Nom al√©atoire

# V√©rifier que le programme existe
if (-not (Test-Path $ProgramPath)) {
    Write-Host "[-] Programme introuvable : $ProgramPath"
    exit 1
}

# D√©tecter l'utilisateur connect√©
$UserName = (Get-WmiObject Win32_ComputerSystem).UserName
if (-not $UserName) {
    Write-Host "[-] Aucun utilisateur connect√©."
    exit 1
}
$UserSID = (Get-WmiObject Win32_UserAccount -Filter "Name='$($UserName.Split('\')[1])' AND Domain='$($UserName.Split('\')[0])'").SID
if (-not $UserSID) {
    Write-Host "[-] Impossible de r√©cup√©rer le SID de l'utilisateur."
    exit 1
}

Write-Host "[*] Utilisateur : $UserName (SID: $UserSID)"

# Obtenir la session interactive
$Session = (Get-Process Explorer -ErrorAction SilentlyContinue).SessionId
if ($Session -eq $null -or $Session -eq 0) {
    Write-Host "[-] Aucune session interactive d√©tect√©e (Explorer non lanc√© ou session 0)."
    exit 1
}
Write-Host "[*] Session interactive : $Session"

# Connexion au service de planification
$Scheduler = New-Object -ComObject Schedule.Service
$Scheduler.Connect()

# Dossier racine
$RootFolder = $Scheduler.GetFolder("\\")

# Cr√©er une t√¢che en m√©moire (non enregistr√©e)
$TaskDefinition = $Scheduler.NewTask(0)

# Informations
$TaskDefinition.RegistrationInfo.Description = "T√¢che temporaire furtive"
$TaskDefinition.Principal.UserId = $UserName
$TaskDefinition.Principal.LogonType = 3  # S4U (utilise le jeton sans mot de passe)
$TaskDefinition.Principal.RunLevel = 0   # Pas d'√©l√©vation

# D√©clencheur : imm√©diat
$Trigger = $TaskDefinition.Triggers.Create(1)  # TimeTrigger
$Trigger.StartBoundary = (Get-Date).ToString("yyyy-MM-dd'T'HH:mm:ss")
$Trigger.Enabled = $true

# Action
$Action = $TaskDefinition.Actions.Create(0)
$Action.Path = $ProgramPath

# Configurer la t√¢che pour qu'elle s'ex√©cute dans la session utilisateur
$TaskDefinition.Settings.ExecutionTimeLimit = "PT0S"   # Pas de timeout
$TaskDefinition.Settings.Hidden = $true                # Invisible
$TaskDefinition.Settings.Priority = 0                  # Priorit√© normale

# --- üî• EX√âCUTION DIRECTE SANS ENREGISTREMENT ---
# On utilise `TargetServer` = null, `TaskName` = null ‚Üí t√¢che temporaire
$WorkItem = $RootFolder.Validate($TaskDefinition, [ref]$null)
$WorkItem = $RootFolder.CreateWorkItem($TaskName, $TaskDefinition)

# Lancer la t√¢che en m√©moire
$RunningTask = $WorkItem.Run()
if ($RunningTask) {
    Write-Host "[+] Programme lanc√© dans la session de $UserName."
    Start-Sleep -Seconds 2  # Laisser le temps au processus de d√©marrer
    $WorkItem.Terminate()   # Optionnel : forcer l'arr√™t si besoin
} else {
    Write-Host "[-] √âchec du lancement du programme."
    exit 1
}

# Nettoyage : la t√¢che n'existe que dans la variable
Remove-Variable -Name WorkItem -ErrorAction SilentlyContinue
[System.Runtime.Interopservices.Marshal]::ReleaseComObject($Scheduler) | Out-Null
[GC]::Collect()

Write-Host "[*] T√¢che temporaire nettoy√©e. Aucune trace dans le planificateur."
